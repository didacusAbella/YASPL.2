/*
   YASPL.2 Grammar
*/
package com.didacusabella.yaspl.dist;
import java_cup.runtime.*;
import com.didacusabella.yaspl.syntax.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.List;

parser code {:

   public void report_error(String message, Object info) {
     if (info instanceof ComplexSymbol) {
       ComplexSymbol cs = (ComplexSymbol)info;
       String msg = String.format("%s for input symbol %s spanning from $s to %s", message, cs.getName(), cs.getLeft(), cs.getRight());
       System.err.println(msg);
     } else {
         System.err.println(message);  
     }
   }

   protected void report_expected_token_ids() {
     List<Integer> ids = this.expected_token_ids();
     LinkedList<String> list = new LinkedList<>();
     ids.forEach(id -> list.add(this.symbl_name_from_id(id)));
     System.err.println("instead expected token classes are " + list);
    }
:}

/* Terminals (tokens returned by the scanner). Annotated with String attribute. Exception for constants */
terminal String        HEAD, START, SEMI, INT, BOOL, DOUBLE, NAME, COMMA, DEF, LPAR, RPAR, COLON, LGPAR,
                       RGPAR, READ, WRITE, PLUS, MINUS, TIMES, DIV,  ASSIGN, IF, THEN, ELSE, WHILE, DO,
                       GT, GE, LT, LE, EQ, NOT, AND, OR, STRING, UMINUS;
terminal Integer INT_CONST;
terminal Double DOUBLE_CONST;
terminal String STRING_CONST;
terminal Boolean TRUE, FALSE;

/* Non terminals. Each non terminal is annotated with a class */
non terminal Program Programma;
non terminal VariableDeclaration Var_decl;
non terminal TypeDenoter Type;
non terminal FunctionDeclaration Def_decl;
non terminal Body Body;
non terminal CompositeStatement Comp_stat;
non terminal Statement Stat, Simple_stat;
non terminal Expression Expr;
non terminal BooleanExpression Bool_Expr;
non terminal LinkedList<ParameterDeclaration> Par_decls;
non terminal LinkedList<Decl> Decls;
non terminal LinkedList<Statement> Statements;
non terminal LinkedList<Variable> Vars;
non terminal LinkedList<TypeDenoter> Types;
non terminal LinkedList<Expression> Out_values;
non terminal LinkedList<Expression> Exprs;
non terminal LinkedList<VariableDeclaration> Var_decls;
non terminal LinkedList<Expression> Def_Expr;
non terminal String Arith_op, Bool_op, Rel_op;

/* Precedences. C style */
precedence left COMMA;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left TIMES, DIV;
precedence left PLUS, MINUS;
precedence right NOT;


/*------------------------------------------- START GRAMMAR--------------------------------------------------*/

/********************************** Entrypoint of the Program *****************************************/
Programma ::= HEAD:h Decls:decls START Statements:stmts {:  RESULT = new Program(hxleft, hxright, decls, stmts); :};


/***************************************** Declarations ***********************************************/
Decls  ::=  Var_decl:var_decl Decls:decls               {: decls.addFirst(var_decl); RESULT = decls; :}
          | Def_decl:def_decl Decls:decls               {: decls.addFirst(def_decl); RESULT = decls; :}
          |                                             {: RESULT = new LinkedList<>(); :} //empty production
          ;


/********************************** Statements ********************************************************/
Statements ::= Stat:s Statements:stmts                  {: stmts.addFirst(s); RESULT = stmts ; :}
              | Stat:s                                  {: RESULT = new LinkedList<>(); RESULT.addFirst(s); :}
              ;


/********************************** Variable Declarations *******************************************/
Var_decl ::= Type:type Vars:vars SEMI                   {: RESULT = new VariableDeclaration(typexleft, typexright, type, vars); :};


/************************************ Types ammitted ************************************************/
Type ::=  INT:i                                         {: RESULT = new TypeDenoter(ixleft, ixright, "int"); :}
        | BOOL:b                                        {: RESULT = new TypeDenoter(bxleft, bxright, "bool"); :}
        | DOUBLE:d                                      {: RESULT = new TypeDenoter(dxleft, dxright, "double"); :}
        | STRING:s                                      {: RESULT = new TypeDenoter(sxleft, sxright, "string"); :}
        ;


/***************************************** Variables ***********************************************/
Vars ::= NAME:name COMMA:c Vars:vars                    {: vars.addFirst(new Variable(namexleft, namexright, name)); RESULT = vars; :}
       | NAME:name                                      {: RESULT = new LinkedList<>(); RESULT.addFirst(new Variable(namexleft, namexright, name)); :}
        ;


/***************************************** Type set ***********************************************/
Types ::= Type:type COMMA Types:types                   {: types.addFirst(type); RESULT = types; :}
         | Type:type                                    {: RESULT = new LinkedList<>(); RESULT.addFirst(type); :}
         ;


/********************************** Function Declaration *****************************************/
Def_decl ::= DEF:d NAME:fname LPAR Var_decls:decls RPAR COLON Par_decls:pars Body:body
                                                        {: RESULT = new FunctionDeclaration(dxleft, dxright, new Variable(fnamexleft, fnamexright, fname), decls, pars, body); :}
            ;


/********************************** Variable Declarations *****************************************/
Var_decls ::= Var_decl:vd Var_decls:vds                 {: vds.addFirst(vd); RESULT = vds; :}
             |                                          {: RESULT = new LinkedList<>(); :}//empty production
             ;


/************************************ Function Parameter *****************************************/
Par_decls ::= Var_decl:vd Par_decls:pd                  {: pd.addFirst(new ParameterDeclaration(vdxleft, vdxright, vd)); RESULT = pd; :}
             | Var_decl:vd                              {: RESULT = new LinkedList<>(); RESULT.addFirst(new ParameterDeclaration(vdxleft, vdxright, vd)); :}
             ;


/************************************ Body Program **********************************************/
Body ::= LGPAR:l Var_decls:vds Statements:stmts RGPAR SEMI {: RESULT = new Body(lxleft, lxright, vds, stmts); :};


/********************************** Composite Statement *****************************************/
Comp_stat ::= LGPAR:l Statements:stmts RGPAR           {: RESULT = new CompositeStatement(lxleft, lxright, stmts); :} ;


/**************************************** Statement ********************************************/
Stat ::= Comp_stat:cs                                  {: RESULT = cs; :}
       | Simple_stat:ss                                {: RESULT = ss; :}
       ;


/********************************** Simple Statement *******************************************/
Simple_stat ::=  Vars:vs READ Types:tps SEMI          {: RESULT = new ReadStatement(vsxleft, vsxright, vs, tps); :}
               | Out_values:ov WRITE SEMI             {: RESULT = new WriteStatement(ovxleft, ovxright, ov); :}
               | NAME:name ASSIGN Expr:expr SEMI      {: RESULT = new AssignStatement(namexleft, namexright, new Identifier(namexleft, namexright, name), expr); :}
               | NAME:name LPAR Def_Expr:def COLON Vars:vs RPAR SEMI
                                                      {: RESULT = new FunctionCall(namexleft, namexright, new Identifier(namexleft, namexright, name), def, vs); :}
               | IF:i LPAR Bool_Expr:be RPAR THEN Comp_stat:c1 ELSE Comp_stat:c2 SEMI
                                                      {: RESULT = new IfThenElseStatement(ixleft, ixright, be, c1, c2); :}
               | IF:i LPAR Bool_Expr:be RPAR THEN Comp_stat:c1 SEMI
                                                      {: RESULT = new IfThenStatement(ixleft, ixright, be, c1); :}
               | WHILE:wh LPAR Bool_Expr:be RPAR DO Comp_stat:c1 SEMI
                                                      {: RESULT = new WhileStatement(whxleft, whxright, be, c1); :}
               | error SEMI
               ;


/********************************** Input/Output *********************************************/
Out_values ::=  Expr:exp COMMA Out_values:ov          {: ov.addFirst(exp); RESULT = ov; :}
              | STRING_CONST:sc COMMA Out_values:ov   {: ov.addFirst(new StringConst(scxleft, scxright, sc)); RESULT = ov; :}
              | Expr:exp                              {: RESULT = new LinkedList<>(); RESULT.addFirst(exp); :}
              ;


/********************************** Function Parameters *****************************************/
Def_Expr ::= Exprs:exprs                              {: RESULT = new LinkedList<>(); RESULT.addAll(exprs); :}
            |                                         {: RESULT = new LinkedList<>(); :} //empty
            ;


/************************************** Expressions ********************************************/
Exprs ::= Expr:exp COMMA Exprs:exprs                  {: exprs.addFirst(exp); RESULT = exprs; :}
         | Expr:exp                                   {: RESULT = new LinkedList<>(); RESULT.addFirst(exp); :}
         ;


/************************************** Expression ********************************************/
Expr ::= INT_CONST:ic                                 {: RESULT = new IntegerConst(icxleft, icxright, ic); :}
        | DOUBLE_CONST:dc                             {: RESULT = new DoubleConst(dcxleft, dcxright, dc); :}
        | STRING_CONST:sc                             {: RESULT = new StringConst(scxleft, scxright, sc); :}
        | Expr:s1 Arith_op:op Expr:s2                 {: RESULT = new BinaryExpression(s1xleft, s1xright, s1, s2, op); :}
        | NAME:name                                   {: RESULT = new Identifier(namexleft, namexright, name);:}
        | MINUS Expr:exp                              {: RESULT = new UminusExpression(expxleft, expxright, exp); :} %prec UMINUS
        | LPAR Expr:expr RPAR                         {: RESULT = expr; :}
        ;


/********************************** Arithmetical Operation *****************************************/
Arith_op ::= PLUS:s                                   {: RESULT = "PLUS"; :}
            | MINUS:s                                 {: RESULT = "MINUS"; :}
            | TIMES:s                                 {: RESULT = "TIMES"; :}
            | DIV:s                                   {: RESULT = "DIV"; :}
            ;


/********************************** BooleanExpression *****************************************/
Bool_Expr ::= TRUE:t                                  {: RESULT = new BooleanConst(txleft, txright, t); :}
             | FALSE:f                                {: RESULT = new BooleanConst(fxleft, fxright, f); :}
             | Bool_Expr:b1 Bool_op:bo Bool_Expr:b2   {: RESULT = new RelationalExpression(b1xleft, b1xright, b1, b2, bo); :}
             | NOT Bool_Expr:exp                      {: RESULT = new NotExpression(expxleft, expxright, exp); :}
             | Expr:r1 Rel_op:ro Expr:r2              {: RESULT = new RelationalExpression(r1xleft, r1xright, r1, r2, ro);:}
             | LPAR Bool_Expr:be RPAR                 {: RESULT = be; :}
             ;


/********************************** BooleanOperation *****************************************/
Bool_op ::= AND:bo                                    {: RESULT = "AND"; :}
           | OR:bo                                    {: RESULT = "OR"; :}
           ;


/********************************** Relational Operations *****************************************/
Rel_op ::=  GT:ro                                     {: RESULT = "GT"; :}
          | GE:ro                                     {: RESULT = "GE"; :}
          | LT:ro                                     {: RESULT = "LT"; :}
          | LE:ro                                     {: RESULT = "LE"; :}
          | EQ:ro                                     {: RESULT = "EQ"; :}
          ;

/*------------------------------------------- END GRAMMAR--------------------------------------------------*/