/*
   YASP.2 Grammar
*/
package com.didacusabella;
import java_cup.runtime.*;
import com.didacusabella.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  FileInputStream fis = new FileInputStream(new File("input.txt"));
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            HEAD, START, SEMI, INT, BOOL, DOUBLE, NAME, COMMA, DEF, LPAR, RPAR, COLON, LGPAR, RGPAR, READ, WRITE, PLUS, MINUS, TIMES, DIV,
                    INT_CONST, DOUBLE_CONST, STRING_CONST, TRUE, FALSE, ASSIGN, IF, THEN, ELSE, WHILE, DO, GT, GE, LT, LE, EQ, NOT, AND, OR;

/* Non terminals */
non terminal            Programma, Decls, Statements, Var_decl, Type, Vars, Types, Def_decl, Var_decls, Par_decls, Body, Comp_stat, Stat, Simple_stat,
                        Out_values, Exprs, Expr, Arith_op, Bool_Expr, Bool_op, Rel_op;

/* Precedences. C style */

precedence left COMMA;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left TIMES, DIV;
precedence left PLUS, MINUS;
precedence right NOT;

/*-------------GRAMMAR----------------------*/

//Entry
Programma ::= HEAD Decls START Statements;
//Declararions
Decls  ::=  Var_decl Decls
          | Def_decl Decls
          | //simulate empty production
          ;
//Statements
Statements ::= Stat Statements
              | Stat
              ;
//Variable Declarations
Var_decl ::= Type Vars SEMI;
// Types ammitted
Type ::=  INT
        | BOOL
        | DOUBLE
        ;
// Var set
Vars ::= NAME COMMA Vars
        | NAME
        ;
// Type set
Types ::= Type COMMA Types
         | Type
         ;
// Function Declaration
Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body;
//Variables declarations
Var_decls ::= Var_decl Var_decls
             | //empty production
             ;
// Function paramenter declaration
Par_decls ::= Var_decl Par_decls
             | Var_decl
             ;
//Body program
Body ::= LGPAR Var_decls Statements RGPAR SEMI;
//Complex statements
Comp_stat ::= LGPAR Statements RGPAR;
//Statement
Stat ::= Comp_stat
       | Simple_stat
       ;
//Simple Statement
Simple_stat ::= Vars READ Types SEMI
               | Out_values WRITE SEMI
               | NAME ASSIGN Expr SEMI
               | NAME LPAR Exprs COLON Vars RPAR SEMI
               |IF LPAR Bool_Expr RPAR THEN Comp_stat ELSE Comp_stat SEMI
               | IF LPAR Bool_Expr RPAR THEN Comp_stat SEMI
               |WHILE LPAR Bool_Expr RPAR DO Comp_stat SEMI
               ;
//Input-output
Out_values ::= Expr COMMA Out_values
              | STRING_CONST COMMA Out_values
              | Expr
              | STRING_CONST
              ;
//Expressions
Exprs ::= Expr COMMA Exprs
         | Expr
         ;
//Expression
Expr ::= INT_CONST
        | DOUBLE_CONST
        | Expr Arith_op Expr
        | NAME
        | MINUS Expr
        | LPAR Expr RPAR
        ;
//Arithmetical operation
Arith_op ::= PLUS
            | MINUS
            | TIMES
            | DIV
            ;
//Boolean expression
Bool_Expr ::= TRUE
             | FALSE
             | Bool_Expr Bool_op Bool_Expr
             | NOT Bool_Expr
             | Expr Rel_op Expr
             | LPAR Bool_Expr RPAR
             ;
//Boolean operations
Bool_op ::= AND
           | OR
           ;
//Relational operations
Rel_op ::= GT
          | GE
          | LT
          | LE
          | EQ
          ;
