
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 04 17:34:41 CET 2018
//----------------------------------------------------

package com.didacusabella;

import java_cup.runtime.*;
import com.didacusabella.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 04 17:34:41 CET 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\012\000\002\012\004\000\002\012\002\000\002\013\004" +
    "\000\002\013\003\000\002\014\007\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\017\005\000\002\017\006\000\002\017\011\000\002\017" +
    "\013\000\002\017\011\000\002\017\011\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\003\000\002\022" +
    "\004\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\004\005\001\002\000\004\002\176\001" +
    "\002\000\014\005\ufffd\007\015\010\013\011\007\014\010" +
    "\001\002\000\004\012\062\001\002\000\010\006\ufff7\012" +
    "\ufff7\013\ufff7\001\002\000\004\012\154\001\002\000\014" +
    "\005\ufffd\007\015\010\013\011\007\014\010\001\002\000" +
    "\004\005\017\001\002\000\010\006\ufff8\012\ufff8\013\ufff8" +
    "\001\002\000\014\005\ufffd\007\015\010\013\011\007\014" +
    "\010\001\002\000\010\006\ufff9\012\ufff9\013\ufff9\001\002" +
    "\000\004\005\uffff\001\002\000\024\012\036\015\027\020" +
    "\021\025\020\030\023\031\037\032\026\036\031\041\022" +
    "\001\002\000\014\012\044\015\027\025\020\030\023\031" +
    "\037\001\002\000\024\012\036\015\027\020\021\025\020" +
    "\030\023\031\037\032\026\036\031\041\022\001\002\000" +
    "\004\015\142\001\002\000\042\006\uffdc\013\uffdc\016\uffdc" +
    "\017\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\001\002\000\016\013\140\023\uffe0\024\046\025\047\026" +
    "\052\027\051\001\002\000\030\002\uffea\012\uffea\015\uffea" +
    "\020\uffea\021\uffea\025\uffea\030\uffea\031\uffea\032\uffea\036" +
    "\uffea\041\uffea\001\002\000\006\013\136\023\uffdf\001\002" +
    "\000\014\012\044\015\027\025\020\030\023\031\037\001" +
    "\002\000\004\002\001\001\002\000\004\015\077\001\002" +
    "\000\004\023\075\001\002\000\030\002\uffeb\012\uffeb\015" +
    "\uffeb\020\uffeb\021\uffeb\025\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\036\uffeb\041\uffeb\001\002\000\030\002\ufffb\012\036\015" +
    "\027\020\021\021\ufffb\025\020\030\023\031\037\032\026" +
    "\036\031\041\022\001\002\000\004\022\066\001\002\000" +
    "\024\013\040\015\041\022\ufff5\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\035\042\001\002\000\042\006\uffdb\013" +
    "\uffdb\016\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051" +
    "\uffdb\052\uffdb\001\002\000\004\012\062\001\002\000\014" +
    "\012\044\015\027\025\020\030\023\031\037\001\002\000" +
    "\014\012\044\015\027\025\020\030\023\031\037\001\002" +
    "\000\014\006\050\024\046\025\047\026\052\027\051\001" +
    "\002\000\042\006\uffd9\013\uffd9\016\uffd9\017\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9\001\002\000\014" +
    "\012\044\015\027\025\020\030\023\031\037\001\002\000" +
    "\014\012\uffd6\015\uffd6\025\uffd6\030\uffd6\031\uffd6\001\002" +
    "\000\014\012\uffd5\015\uffd5\025\uffd5\030\uffd5\031\uffd5\001" +
    "\002\000\030\002\uffe7\012\uffe7\015\uffe7\020\uffe7\021\uffe7" +
    "\025\uffe7\030\uffe7\031\uffe7\032\uffe7\036\uffe7\041\uffe7\001" +
    "\002\000\014\012\uffd3\015\uffd3\025\uffd3\030\uffd3\031\uffd3" +
    "\001\002\000\014\012\uffd4\015\uffd4\025\uffd4\030\uffd4\031" +
    "\uffd4\001\002\000\042\006\uffda\013\uffda\016\uffda\017\uffda" +
    "\023\uffda\024\046\025\047\026\052\027\051\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\001\002" +
    "\000\004\017\060\001\002\000\016\013\056\017\uffdd\024" +
    "\046\025\047\026\052\027\051\001\002\000\014\012\044" +
    "\015\027\025\020\030\023\031\037\001\002\000\004\017" +
    "\uffde\001\002\000\004\012\062\001\002\000\004\016\063" +
    "\001\002\000\012\006\ufff5\013\040\016\ufff5\022\ufff5\001" +
    "\002\000\004\006\064\001\002\000\030\002\uffe6\012\uffe6" +
    "\015\uffe6\020\uffe6\021\uffe6\025\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\036\uffe6\041\uffe6\001\002\000\010\006\ufff6\016\ufff6" +
    "\022\ufff6\001\002\000\010\007\015\010\013\011\007\001" +
    "\002\000\006\006\ufff3\013\072\001\002\000\004\006\071" +
    "\001\002\000\030\002\uffe9\012\uffe9\015\uffe9\020\uffe9\021" +
    "\uffe9\025\uffe9\030\uffe9\031\uffe9\032\uffe9\036\uffe9\041\uffe9" +
    "\001\002\000\010\007\015\010\013\011\007\001\002\000" +
    "\004\006\ufff4\001\002\000\006\002\ufffc\021\ufffc\001\002" +
    "\000\004\006\076\001\002\000\030\002\uffe8\012\uffe8\015" +
    "\uffe8\020\uffe8\021\uffe8\025\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\036\uffe8\041\uffe8\001\002\000\022\012\044\015\102\025" +
    "\020\030\023\031\037\033\101\034\103\050\105\001\002" +
    "\000\024\024\046\025\047\026\052\027\051\043\131\044" +
    "\125\045\133\046\130\047\127\001\002\000\010\016\uffd2" +
    "\051\uffd2\052\uffd2\001\002\000\022\012\044\015\102\025" +
    "\020\030\023\031\037\033\101\034\103\050\105\001\002" +
    "\000\010\016\uffd1\051\uffd1\052\uffd1\001\002\000\010\016" +
    "\113\051\107\052\111\001\002\000\022\012\044\015\102" +
    "\025\020\030\023\031\037\033\101\034\103\050\105\001" +
    "\002\000\010\016\uffcf\051\uffcf\052\uffcf\001\002\000\022" +
    "\012\uffcc\015\uffcc\025\uffcc\030\uffcc\031\uffcc\033\uffcc\034" +
    "\uffcc\050\uffcc\001\002\000\022\012\044\015\102\025\020" +
    "\030\023\031\037\033\101\034\103\050\105\001\002\000" +
    "\022\012\uffcb\015\uffcb\025\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\034\uffcb\050\uffcb\001\002\000\010\016\uffd0\051\107\052" +
    "\111\001\002\000\004\037\114\001\002\000\004\020\021" +
    "\001\002\000\006\006\117\040\116\001\002\000\004\020" +
    "\021\001\002\000\030\002\uffe4\012\uffe4\015\uffe4\020\uffe4" +
    "\021\uffe4\025\uffe4\030\uffe4\031\uffe4\032\uffe4\036\uffe4\041" +
    "\uffe4\001\002\000\004\006\121\001\002\000\030\002\uffe5" +
    "\012\uffe5\015\uffe5\020\uffe5\021\uffe5\025\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\036\uffe5\041\uffe5\001\002\000\026\016\132" +
    "\024\046\025\047\026\052\027\051\043\131\044\125\045" +
    "\133\046\130\047\127\001\002\000\010\016\124\051\107" +
    "\052\111\001\002\000\010\016\uffcd\051\uffcd\052\uffcd\001" +
    "\002\000\014\012\uffc9\015\uffc9\025\uffc9\030\uffc9\031\uffc9" +
    "\001\002\000\014\012\044\015\027\025\020\030\023\031" +
    "\037\001\002\000\014\012\uffc6\015\uffc6\025\uffc6\030\uffc6" +
    "\031\uffc6\001\002\000\014\012\uffc7\015\uffc7\025\uffc7\030" +
    "\uffc7\031\uffc7\001\002\000\014\012\uffca\015\uffca\025\uffca" +
    "\030\uffca\031\uffca\001\002\000\042\006\uffd7\013\uffd7\016" +
    "\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\001\002\000\014\012\uffc8\015\uffc8\025\uffc8\030\uffc8" +
    "\031\uffc8\001\002\000\020\016\uffce\024\046\025\047\026" +
    "\052\027\051\051\uffce\052\uffce\001\002\000\014\016\132" +
    "\024\046\025\047\026\052\027\051\001\002\000\016\012" +
    "\044\015\027\025\020\030\023\031\037\032\026\001\002" +
    "\000\004\023\uffe1\001\002\000\016\012\044\015\027\025" +
    "\020\030\023\031\037\032\026\001\002\000\004\023\uffe2" +
    "\001\002\000\022\012\044\015\102\025\020\030\023\031" +
    "\037\033\101\034\103\050\105\001\002\000\010\016\144" +
    "\051\107\052\111\001\002\000\004\042\145\001\002\000" +
    "\004\020\021\001\002\000\004\006\147\001\002\000\030" +
    "\002\uffe3\012\uffe3\015\uffe3\020\uffe3\021\uffe3\025\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\036\uffe3\041\uffe3\001\002\000\004" +
    "\021\151\001\002\000\034\002\uffec\006\uffec\012\uffec\015" +
    "\uffec\020\uffec\021\uffec\025\uffec\030\uffec\031\uffec\032\uffec" +
    "\036\uffec\040\uffec\041\uffec\001\002\000\042\006\uffd8\013" +
    "\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051" +
    "\uffd8\052\uffd8\001\002\000\004\005\ufffe\001\002\000\004" +
    "\015\155\001\002\000\012\007\015\010\013\011\007\016" +
    "\ufff0\001\002\000\004\016\161\001\002\000\034\007\015" +
    "\010\013\011\007\012\ufff0\015\ufff0\016\ufff0\020\ufff0\025" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\036\ufff0\041\ufff0\001\002" +
    "\000\026\012\ufff1\015\ufff1\016\ufff1\020\ufff1\025\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\036\ufff1\041\ufff1\001\002\000\004" +
    "\017\162\001\002\000\010\007\015\010\013\011\007\001" +
    "\002\000\004\020\166\001\002\000\012\007\015\010\013" +
    "\011\007\020\uffee\001\002\000\004\020\uffef\001\002\000" +
    "\032\007\015\010\013\011\007\012\ufff0\015\ufff0\020\ufff0" +
    "\025\ufff0\030\ufff0\031\ufff0\032\ufff0\036\ufff0\041\ufff0\001" +
    "\002\000\014\005\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2" +
    "\001\002\000\024\012\036\015\027\020\021\025\020\030" +
    "\023\031\037\032\026\036\031\041\022\001\002\000\004" +
    "\021\172\001\002\000\004\006\173\001\002\000\014\005" +
    "\uffed\007\uffed\010\uffed\011\uffed\014\uffed\001\002\000\004" +
    "\006\175\001\002\000\040\005\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\025\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\036\ufffa\041\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\013\006\005\011\010\001\001\000\004" +
    "\007\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\152\005\013\006\005\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\015\005\013\006" +
    "\005\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\027\007\034\015\032\016\033\017\024\020" +
    "\031\022\023\001\001\000\004\022\151\001\001\000\020" +
    "\004\147\007\034\015\032\016\033\017\024\020\031\022" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\073\007" +
    "\034\015\032\016\033\017\024\020\031\022\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\064\001\001\000\006\021\053\022\054\001\001" +
    "\000\004\022\042\001\001\000\004\023\044\001\001\000" +
    "\002\001\001\000\004\022\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\044\001\001\000\002\001\001" +
    "\000\004\023\044\001\001\000\006\021\056\022\054\001" +
    "\001\000\002\001\001\000\004\007\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\066\010\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\066\010\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\077\024\103\001\001\000\006\023\044\026\125\001\001" +
    "\000\002\001\001\000\006\022\121\024\122\001\001\000" +
    "\002\001\001\000\004\025\107\001\001\000\006\022\077" +
    "\024\105\001\001\000\004\025\107\001\001\000\002\001" +
    "\001\000\006\022\077\024\111\001\001\000\002\001\001" +
    "\000\004\025\107\001\001\000\002\001\001\000\004\015" +
    "\114\001\001\000\002\001\001\000\004\015\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\044\026\125\001\001\000\004\025\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\044\001" +
    "\001\000\004\023\044\001\001\000\006\020\136\022\023" +
    "\001\001\000\002\001\001\000\006\020\140\022\023\001" +
    "\001\000\002\001\001\000\006\022\077\024\142\001\001" +
    "\000\004\025\107\001\001\000\002\001\001\000\004\015" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\156\006\005" +
    "\012\155\001\001\000\002\001\001\000\010\005\156\006" +
    "\005\012\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\163\006\005\013\162\001\001\000\004\014" +
    "\166\001\001\000\010\005\163\006\005\013\164\001\001" +
    "\000\002\001\001\000\010\005\156\006\005\012\167\001" +
    "\001\000\002\001\001\000\020\004\170\007\034\015\032" +
    "\016\033\017\024\020\031\022\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  FileInputStream fis = new FileInputStream(new File("input.txt"));
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Rel_op",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_op",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_Expr ::= LPAR Bool_Expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_Expr ::= Expr Rel_op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_Expr ::= NOT Bool_Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool_Expr ::= Bool_Expr Bool_op Bool_Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool_Expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bool_Expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_Expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arith_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= Expr Arith_op Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= DOUBLE_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exprs ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Out_values ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Out_values ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Out_values ::= Expr COMMA Out_values 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= WHILE LPAR Bool_Expr RPAR DO Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= IF LPAR Bool_Expr RPAR THEN Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= IF LPAR Bool_Expr RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Simple_stat ::= NAME LPAR Exprs COLON Vars RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Simple_stat ::= NAME ASSIGN Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Simple_stat ::= Out_values WRITE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Simple_stat ::= Vars READ Types SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Simple_stat",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= Simple_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= Comp_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= LGPAR Var_decls Statements RGPAR SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Par_decls ::= Var_decl Par_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls ::= Var_decl Var_decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Vars ::= NAME COMMA Vars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Vars SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= Stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

